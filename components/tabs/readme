/**
 * A simple tab control.
 * Calls view associated with selected tab.
 *
 * new mc.Tabs.controller(tabs, activeTab)
 *   {obj} tabs: tab options { tabName1:..., tabName2:..., ... } where each tab's value is
 *              {view: {fcn} viewFcn, ctrl: {obj} ctrl for viewFcn, label: {str} tabLabel }
 *           || {view: {fcn} viewFcn, ctrl: {obj} ctrl for viewFcn }
 *           || {view: {fcn} viewFcn }
 *           || {fcn} viewFcn
 *           tabLabel defaults to name.
 *           ctrl defaults to the last ctrl provided.
 *   {str} activeTab: name of active tab. Defaults to m.route.param('tab') and
 *           then to the first name in tabs.
 *
 * mc.Tabs.view(ctrl, options)
 *   {obj} ctrl: Tabs's controller.
 *   {obj} options: options overriding controller's options. Optional.
 *           options.tabs
 *           options.activeTab
 *
 * SAMPLE USAGE ================================================================

    <script src="js/vendor/mithril.js"></script>
    <script src="../components/tabs/tabs.js"></script>

    var app = {
      name: m.prop('John'),
      dept: m.prop('dev'),
      list: m.prop([
        { "author": "Albert Camus",
          "quote": "Those who lack the courage will always find a philosophy to justify it."
        },
        { "author": "Plato",
          "quote": "You can discover more about a person in an hour of play than in a year of conversation."
        },
        { "author": "Ludwig Wittgenstein",
          "quote": "If people never did silly things nothing intelligent would ever get done."
        }
      ]),

      controller: function () {
        console.log('controller name=', app.name());
        this.tabs = new mc.Tabs.controller({
          list: { view: app.listView, legend: 'theList' },
          settings: { view: app.settingsView },
          about: app.aboutView
        }, this);

        this.name = m.prop(app.name());
        this.dept = m.prop(app.dept());
        this.list = m.prop(app.list());
      },

      view: function (ctrl) {
        return mc.Tabs.view(ctrl.tabs);
      },

      listView: function (ctrl) {
        return m('ul.itemlist',
          ctrl.list().map(function (item) {
            return m("li", item.quote + ' - ' + item.author);
          })
        );
      },
      settingsView: function (ctrl) {
        return m('form', [ // <form> is optional
          m('div', 'name (4 to 10 chars)'),
          m('input',
            { value: ctrl.name(),
              onchange: m.withAttr('value', app.name) }),
          m('div', 'department'),
          m('input',
            { value: ctrl.dept(), onchange: m.withAttr('value', app.dept) })
        ]);
      },
      aboutView: function (ctrl) {
        return m(
          ".about", [
            "Add a quote in JSON",
            m("hr"),
            m("textarea", { rows: 10, cols: 80,
                onchange: function () { app.list(JSON.parse(this.value)); } },
              JSON.stringify(ctrl.list())
            ),
            m('p', 'If you go to the [list] tab, you will see the changes at once.')
          ]
        );
      }
    };

    m.route(document.body, '/', {
      '/': app,
      '/:tab': app
    });
 */